name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'environments/**'
      - 'modules/**'

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            dev:
              - 'environments/dev/**'
              - 'modules/**'
            staging:
              - 'environments/staging/**'
              - 'modules/**'
            prod:
              - 'environments/prod/**'
              - 'modules/**'

  apply:
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != '[]'
    runs-on: ubuntu-latest
    strategy:
      # Run environments sequentially: dev → staging → prod
      max-parallel: 1
      matrix:
        environment: ${{ fromJSON(needs.detect-changes.outputs.environments) }}
    
    environment:
      name: ${{ matrix.environment }}
    
    env:
      TF_VERSION: '1.6.0'
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('AWS_ROLE_{0}', matrix.environment)] }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: environments/${{ matrix.environment }}

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve -no-color | tee apply.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        working-directory: environments/${{ matrix.environment }}

      - name: Extract Outputs
        if: success()
        id: outputs
        run: |
          terraform output -json > outputs.json
        working-directory: environments/${{ matrix.environment }}

      - name: Create Success Issue Comment
        if: success() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const apply = fs.readFileSync('environments/${{ matrix.environment }}/apply.txt', 'utf8');
            const truncatedApply = apply.length > 65000 ? apply.substring(0, 65000) + '\n\n... (truncated)' : apply;
            
            const output = `### ✅ Terraform Apply Successful: \`${{ matrix.environment }}\`
            
            **Commit**: ${{ github.sha }}
            **Author**: @${{ github.actor }}
            **Environment**: ${{ matrix.environment }}

            <details><summary>Show Apply Output</summary>

            \`\`\`terraform
            ${truncatedApply}
            \`\`\`

            </details>`;

            // Find the most recent commit's PR and comment there
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });

            if (commits.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: commits.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const apply = fs.readFileSync('environments/${{ matrix.environment }}/apply.txt', 'utf8');
            
            const output = `### ❌ Terraform Apply Failed: \`${{ matrix.environment }}\`
            
            **Commit**: ${{ github.sha }}
            **Author**: @${{ github.actor }}
            
            <details><summary>Show Error</summary>
            
            \`\`\`
            ${apply}
            \`\`\`
            
            </details>
            
            @${{ github.actor }} Please investigate and fix.`;

            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha
            });

            if (commits.data.length > 0) {
              await github.rest.issues.createComment({
                issue_number: commits.data[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
